Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Separator = exports.CardImage = exports.CardContent = exports.CardAction = exports.CardTitle = exports.Card = undefined;
var _jsxFileName = '/home/radius/Swachhthon/node_modules/react-native-card-view/react-native-card-view.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var Card = function (_Component) {
  babelHelpers.inherits(Card, _Component);

  function Card() {
    babelHelpers.classCallCheck(this, Card);
    return babelHelpers.possibleConstructorReturn(this, (Card.__proto__ || Object.getPrototypeOf(Card)).apply(this, arguments));
  }

  babelHelpers.createClass(Card, [{
    key: 'render',
    value: function render() {
      var newStyles = this.props.styles || {};
      return _react2.default.createElement(
        _reactNative.View,
        { style: [styles.container, styles.card, newStyles.card], __source: {
            fileName: _jsxFileName,
            lineNumber: 18
          }
        },
        this.props.children
      );
    }
  }]);
  return Card;
}(_react.Component);

var CardImage = function (_Component2) {
  babelHelpers.inherits(CardImage, _Component2);

  function CardImage() {
    babelHelpers.classCallCheck(this, CardImage);
    return babelHelpers.possibleConstructorReturn(this, (CardImage.__proto__ || Object.getPrototypeOf(CardImage)).apply(this, arguments));
  }

  babelHelpers.createClass(CardImage, [{
    key: 'render',
    value: function render() {
      var newStyles = this.props.styles || {};
      return _react2.default.createElement(
        _reactNative.View,
        { style: [styles.cardImage, newStyles.cardImage], __source: {
            fileName: _jsxFileName,
            lineNumber: 29
          }
        },
        this.props.children
      );
    }
  }]);
  return CardImage;
}(_react.Component);

var CardTitle = function (_Component3) {
  babelHelpers.inherits(CardTitle, _Component3);

  function CardTitle() {
    babelHelpers.classCallCheck(this, CardTitle);
    return babelHelpers.possibleConstructorReturn(this, (CardTitle.__proto__ || Object.getPrototypeOf(CardTitle)).apply(this, arguments));
  }

  babelHelpers.createClass(CardTitle, [{
    key: 'render',
    value: function render() {
      var newStyles = this.props.styles || {};
      return _react2.default.createElement(
        _reactNative.View,
        { style: [styles.cardTitle, newStyles.cardTitle], __source: {
            fileName: _jsxFileName,
            lineNumber: 40
          }
        },
        this.props.children
      );
    }
  }]);
  return CardTitle;
}(_react.Component);

var CardContent = function (_Component4) {
  babelHelpers.inherits(CardContent, _Component4);

  function CardContent() {
    babelHelpers.classCallCheck(this, CardContent);
    return babelHelpers.possibleConstructorReturn(this, (CardContent.__proto__ || Object.getPrototypeOf(CardContent)).apply(this, arguments));
  }

  babelHelpers.createClass(CardContent, [{
    key: 'render',
    value: function render() {
      var newStyles = this.props.styles || {};
      return _react2.default.createElement(
        _reactNative.View,
        { style: [styles.cardContent, newStyles.cardContent], __source: {
            fileName: _jsxFileName,
            lineNumber: 51
          }
        },
        this.props.children
      );
    }
  }]);
  return CardContent;
}(_react.Component);

var CardAction = function (_Component5) {
  babelHelpers.inherits(CardAction, _Component5);

  function CardAction() {
    babelHelpers.classCallCheck(this, CardAction);
    return babelHelpers.possibleConstructorReturn(this, (CardAction.__proto__ || Object.getPrototypeOf(CardAction)).apply(this, arguments));
  }

  babelHelpers.createClass(CardAction, [{
    key: 'render',
    value: function render() {
      var newStyles = this.props.styles || {};
      return _react2.default.createElement(
        _reactNative.View,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 62
          }
        },
        this.props.separator ? _react2.default.createElement(Separator, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 63
          }
        }) : null,
        _react2.default.createElement(
          _reactNative.View,
          { style: [styles.cardAction, newStyles.cardAction], __source: {
              fileName: _jsxFileName,
              lineNumber: 64
            }
          },
          this.props.children
        )
      );
    }
  }]);
  return CardAction;
}(_react.Component);

var Separator = function (_Component6) {
  babelHelpers.inherits(Separator, _Component6);

  function Separator() {
    babelHelpers.classCallCheck(this, Separator);
    return babelHelpers.possibleConstructorReturn(this, (Separator.__proto__ || Object.getPrototypeOf(Separator)).apply(this, arguments));
  }

  babelHelpers.createClass(Separator, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_reactNative.View, { style: styles.separator, __source: {
          fileName: _jsxFileName,
          lineNumber: 74
        }
      });
    }
  }]);
  return Separator;
}(_react.Component);

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
    margin: 5
  },
  card: {
    backgroundColor: "#fff",
    borderRadius: 2,
    shadowColor: "#000000",
    shadowOpacity: 0.3,
    shadowRadius: 1,
    shadowOffset: {
      height: 1,
      width: 0.3
    }
  },
  cardImage: {
    flex: 1
  },
  cardTitle: {
    flex: 1,
    flexDirection: 'row',
    padding: 16
  },
  cardContent: {
    paddingRight: 16,
    paddingLeft: 16,
    paddingTop: 16,
    paddingBottom: 16
  },
  cardAction: {
    margin: 8,
    flexDirection: 'row',
    alignItems: 'center'

  },
  separator: {
    flex: 1,
    height: 1,
    backgroundColor: '#E9E9E9'
  }
});

exports.Card = Card;
exports.CardTitle = CardTitle;
exports.CardAction = CardAction;
exports.CardContent = CardContent;
exports.CardImage = CardImage;
exports.Separator = Separator;